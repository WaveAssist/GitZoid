"""
WaveAssist Node: Post AI-Generated PR Comments to GitHub

This node reads `pull_requests` and `repositories` from WaveAssist,
posts new AI-generated comments to GitHub pull requests,
updates each repo’s `last_checked` timestamp, and stores the updated data.

Input:
- pull_requests: list of dicts with repo/pr info and comment metadata
- repositories: list of dicts with repo info and optional last_checked
- github_ghp_token: GitHub token for authentication

Output:
- pull_requests: updated (comment_posted = True, files cleared)
- repositories: updated last_checked
"""

import requests
import waveassist
from datetime import datetime
from typing import List, Optional, Dict

# Initialize
waveassist.init()

# Constants
INTRO_COMMENT = "_Here’s an automated AI-generated review to support your development workflow._\n\n"
FOOTER_COMMENT = "\n\n---\n\n_This review was generated by [GitZoid](https://gitzoid.com), an AI-powered code review assistant._"
GITHUB_API_BASE = "https://api.github.com"


def log(msg: str):
    print(msg)  # Replace with `logging.info` if needed later


def post_comment_to_github(owner: str, repo: str, pr_number: int, body: str, token: str) -> Optional[Dict]:
    url = f"{GITHUB_API_BASE}/repos/{owner}/{repo}/issues/{pr_number}/comments"
    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/vnd.github+json",
    }
    response = requests.post(url, headers=headers, json={"body": body})
    if response.status_code == 201:
        log(f"✅ Comment posted to {owner}/{repo} PR #{pr_number}")
        return response.json()
    log(f"❌ Failed to post comment to {owner}/{repo} PR #{pr_number} | Status: {response.status_code}")
    return None


def update_last_checked(repos: List[Dict], owner: str, name: str, new_time: str):
    for repo in repos:
        if repo.get("repo_owner") == owner and repo.get("repo_name") == name:
            current = repo.get("last_checked")
            try:
                new_dt = datetime.fromisoformat(new_time.replace("Z", "+00:00"))
                if not current or datetime.fromisoformat(current.replace("Z", "+00:00")) < new_dt:
                    repo["last_checked"] = new_time
            except Exception:
                repo["last_checked"] = new_time  # fallback in case of malformed timestamp
            break


def main():
    prs = waveassist.fetch_data("pull_requests") or []
    repos = waveassist.fetch_data("repositories") or []
    token = waveassist.fetch_data("github_ghp_token")

    if not token:
        raise RuntimeError("❌ Missing `github_ghp_token` input.")

    for pr in prs:
        if pr.get("comment_posted") or not pr.get("comment_generated"):
            continue

        comment = pr.get("comment", "").strip()
        if not comment:
            continue

        full_body = f"{INTRO_COMMENT}{comment}{FOOTER_COMMENT}"
        result = post_comment_to_github(
            pr["repo_owner"],
            pr["repo_name"],
            pr["pr_number"],
            full_body,
            token,
        )
        if result:
            pr["comment_posted"] = True
            pr["files"] = []  # Clear file diffs
            update_last_checked(repos, pr["repo_owner"], pr["repo_name"], pr["pr_created_at"])

    success_repos = waveassist.store_data("repositories", repos)
    success_prs = waveassist.store_data("pull_requests", prs)

    if success_repos and success_prs:
        log("✅ Repositories and PRs updated successfully.")
    else:
        log("❌ Error: failed to store updated data.")


if __name__ == "__main__":
    main()
