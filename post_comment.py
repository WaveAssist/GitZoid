import requests
import waveassist
import json

# Initialize WaveAssist
waveassist.init()

# Constants
INTRO_COMMENT = "_Here‚Äôs an automated AI-generated review to support your development workflow._\n\n"
FOOTER_COMMENT = "---\n\n _This review was generated by [Gitzoid](https://waveassist.io/assistants/gitzoid), an AI-powered code review assistant._"


def format_array_to_markdown(items: list) -> str:
    """Convert a Python list to markdown bullet points."""
    if not items:
        return ""
    return "\n".join([f"- {item}" for item in items])


def generate_comment(review_dict: dict) -> str:
    summary = review_dict.get("summary", [])
    potential_issues = review_dict.get("potential_issues", [])
    potential_optimizations = review_dict.get("potential_optimizations", [])
    suggestions = review_dict.get("suggestions", [])
    output_comment = INTRO_COMMENT
    if summary:
        formatted_summary = format_array_to_markdown(summary)
        output_comment += f"## üìù Summary\n\n{formatted_summary}\n\n"
    if potential_issues:
        formatted_issues = format_array_to_markdown(potential_issues)
        output_comment += f"## ‚ö†Ô∏è Potential Issues\n\n{formatted_issues}\n\n"
    if potential_optimizations:
        formatted_optimizations = format_array_to_markdown(potential_optimizations)
        output_comment += (
            f"## üöÄ Potential Optimizations\n\n{formatted_optimizations}\n\n"
        )
    if suggestions:
        formatted_suggestions = format_array_to_markdown(suggestions)
        output_comment += f"## üí° Suggestions\n\n{formatted_suggestions}\n\n"
    output_comment += FOOTER_COMMENT
    return output_comment


def post_pr_comment(repo_path: str, pr_number: int, body: str, token: str):
    """
    Post a comment to a GitHub PR via the Issues API.
    Returns the JSON response on success, or None on failure.
    """
    url = f"https://api.github.com/repos/" f"{repo_path}/issues/{pr_number}/comments"
    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/vnd.github+json",
    }
    resp = requests.post(url, headers=headers, json={"body": body})
    if resp.status_code == 201:
        print(f"‚úÖ Comment posted to {repo_path} PR #{pr_number}")
        return resp.json()
    print(f"‚ùå Failed to post comment (HTTP {resp.status_code}): {resp.json()}")
    return None


def update_last_checked(repos: list, repo_path: str, timestamp: str):
    """
    Update `last_checked` on the matching repo dict if the new timestamp is later.
    """
    for repo in repos:
        if repo.get("id") == repo_path:
            existing = repo.get("last_checked")
            if existing is None or timestamp > existing:
                repo["last_checked"] = timestamp
                repo["extra"] = {}
            break


# Fetch inputs
prs_to_review = waveassist.fetch_data("pull_requests") or []
should_process = False
for pr in prs_to_review:
    if pr.get("comment_generated") and not pr.get("comment_posted"):
        should_process = True
        break

if should_process:
    github_token = waveassist.fetch_data("github_access_token")
    repositories = waveassist.fetch_data("github_selected_resources")
    display_output_content = "<div style=\"font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; padding: 16px; line-height: 1.5;\">"
    if not github_token:
        raise RuntimeError("‚ùå Missing `github_access_token`; cannot post PR comments.")

    # Process each PR
    for pr in prs_to_review:
        if not pr.get("comment_generated") or pr.get("comment_posted"):
            continue
        review_dict = pr.get("review_dict", {})
        if not review_dict:
            continue

        full_body = generate_comment(review_dict)
        result = post_pr_comment(
            pr["id"],
            pr["pr_number"],
            full_body,
            github_token,
        )
        if result:
            pr["comment_posted"] = True
            pr["files"] = []  # clear diffs for privacy
            update_last_checked(
                repositories,
                pr["id"],
                pr["pr_created_at"],
            )
            display_output_content += f'<div style="margin-bottom: 8px; color: #28a745;">‚úÖ Comment posted to <strong>{pr["id"]}</strong> PR #{pr["pr_number"]}</div>'

    # Persist updates
    display_output_content += '<div style="margin-top: 12px; color: #28a745;">‚úÖ Repositories and PRs updated successfully.</div></div>'
    waveassist.store_data("github_selected_resources", repositories)
    waveassist.store_data("pull_requests", [])
    waveassist.store_data(
        "display_output", {"html_content": display_output_content}, run_based=True
    )
    print("‚úÖ Repositories and PRs updated successfully.")
