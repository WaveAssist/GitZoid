"""
WaveAssist Node: Post AI-Generated PR Comments to GitHub

This node reads `prs_to_review` and `repositories` from WaveAssist, posts new AI-generated review comments
to GitHub pull requests, updates each repo’s `last_checked` timestamp, and persists the updated data.

Input keys:
- `prs_to_review`: list of PR dicts containing:
    - `repo_owner`, `repo_name`, `pr_number`
    - `comment`, `comment_generated`, `comment_posted`
    - `pr_created_at`
- `repositories`: list of repo dicts containing:
    - `repo_owner`, `repo_name`
    - optional `last_checked`
- `github_access_token`: GitHub personal access token for posting comments

Output keys:
- `prs_to_review`: updated with `comment_posted=True` and cleared `files`
- `repositories`: updated `last_checked` timestamps
"""

import requests
import waveassist

# Initialize WaveAssist
waveassist.init()

# Constants
INTRO_COMMENT = (
    "_Here’s an automated AI-generated review to support your development workflow._\n\n"
)
FOOTER_COMMENT = (
    "\n\n---\n\n"
    "_This review was generated by [GitZoid](https://gitzoid.com), an AI-powered code review assistant._"
)


def post_pr_comment(repo_owner: str, repo_name: str, pr_number: int, body: str, token: str):
    """
    Post a comment to a GitHub PR via the Issues API.
    Returns the JSON response on success, or None on failure.
    """
    url = (
        f"https://api.github.com/repos/"
        f"{repo_owner}/{repo_name}/issues/{pr_number}/comments"
    )
    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/vnd.github+json",
    }
    resp = requests.post(url, headers=headers, json={"body": body})
    if resp.status_code == 201:
        print(f"✅ Comment posted to {repo_owner}/{repo_name} PR #{pr_number}")
        return resp.json()
    print(f"❌ Failed to post comment (HTTP {resp.status_code}): {resp.json()}")
    return None


def update_last_checked(repos: list, owner: str, name: str, timestamp: str):
    """
    Update `last_checked` on the matching repo dict if the new timestamp is later.
    """
    for repo in repos:
        if repo.get("repo_owner") == owner and repo.get("repo_name") == name:
            existing = repo.get("last_checked")
            if existing is None or timestamp > existing:
                repo["last_checked"] = timestamp
            break


# Fetch inputs
prs_to_review = waveassist.fetch_data("pull_requests") or []
repositories = waveassist.fetch_data("repositories") or []
github_token = waveassist.fetch_data("github_ghp_token")
if not github_token:
    raise RuntimeError("❌ Missing `github_access_token`; cannot post PR comments.")

# Process each PR
for pr in prs_to_review:
    if not pr.get("comment_generated") or pr.get("comment_posted"):
        continue
    comment_text = pr.get("comment", "").strip()
    if not comment_text:
        continue

    full_body = f"{INTRO_COMMENT}{comment_text}{FOOTER_COMMENT}"
    result = post_pr_comment(
        pr["repo_owner"],
        pr["repo_name"],
        pr["pr_number"],
        full_body,
        github_token,
    )
    if result:
        pr["comment_posted"] = True
        pr["files"] = []  # clear diffs for privacy
        update_last_checked(
            repositories,
            pr["repo_owner"],
            pr["repo_name"],
            pr["pr_created_at"],
        )

# Persist updates
ok1 = waveassist.store_data("repositories", repositories)
ok2 = waveassist.store_data("pull_requests", prs_to_review)

if ok1 and ok2:
    print("✅ Repositories and PRs updated successfully.")
else:
    print("❌ Error: failed to store updated data.")
